#!/usr/bin/python
    
import pyvmelib
import sys, getopt
import os
import struct

def base_addr(switch):
	switch_m = int(switch) 
	switch_m = switch_m << 19
	return hex(switch_m)

def addr_conv(addr):
	addr_m = int(addr,16)
	addr_m = addr_m << 2

	return addr_m

def main(argv):

	print "This test reads out from a VME Master three different Vetar VME cards using the legacy VMEx64 VHDL core,"
	print "the cards need to have the Base Address switches set to: 1, 2 and 3, respectively"
	print "IMPORTANT: Before you run this test, unload and load the driver, it is the easiest way of being sure that you'll"
	print "all the VME windows available"

	raw_input("Press Enter to continue...")

	# width of the WB memory space
	size_wb = 10000000
	addr	= 2097156<<2 #GSI:BUILD_ID ROM

	############
	#First Card#
	############

	switch = 1

	map = pyvmelib.Mapping(am=0x2f, base_address= int(base_addr(switch),16), data_width=16, size=512*1024)
	
	if map.vaddr == None :
		print "CR Not able to reach the card in switch",switch
		sys.exit()

	map.write(offset=0x7FF63, values=192, width=8)
	map.write(offset=0x7FF67, values=0, width=8)
	map.write(offset=0x7FF6B, values=0, width=8)
	map.write(offset=0x7FF6F, values=36, width=8)
	map.write(offset=0x7FFFB, values=16, width=8)

	map_1 = pyvmelib.Mapping(am=0x09, base_address=0xc0000000, data_width=32, size = int(size_wb))
	
	if map_1.vaddr == None :
		print "WB Not able to reach the card in switch",switch
		sys.exit()
	
	#############
	#Second Card#
	#############

	switch = 2

	map = pyvmelib.Mapping(am=0x2f, base_address= int(base_addr(switch),16), data_width=16, size=512*1024)
	
	if map.vaddr == None :
		print "CR Not able to reach the card in switch",switch
		sys.exit()

	map.write(offset=0x7FF63, values=208, width=8)
	map.write(offset=0x7FF67, values=0, width=8)
	map.write(offset=0x7FF6B, values=0, width=8)
	map.write(offset=0x7FF6F, values=36, width=8)
	map.write(offset=0x7FFFB, values=16, width=8)

	map_2 = pyvmelib.Mapping(am=0x09, base_address=0xd0000000, data_width=32, size = int(size_wb))
	
	if map_2.vaddr == None :
		print "WB Not able to reach the card in switch",switch
		sys.exit()
	
	############
	#Third Card#
	############
	
	switch = 3

	map = pyvmelib.Mapping(am=0x2f, base_address= int(base_addr(switch),16), data_width=16, size=512*1024)
	
	if map.vaddr == None :
		print "CR Not able to reach the card in switch",switch
		sys.exit()

	map.write(offset=0x7FF63, values=224, width=8)
	map.write(offset=0x7FF67, values=0, width=8)
	map.write(offset=0x7FF6B, values=0, width=8)
	map.write(offset=0x7FF6F, values=36, width=8)
	map.write(offset=0x7FFFB, values=16, width=8)

	map_3 = pyvmelib.Mapping(am=0x09, base_address=0xe0000000, data_width=32, size = int(size_wb))
	
	if map_3.vaddr == None :
		print "WB Not able to reach the card in switch",switch
		sys.exit()
	
	read = map_1.read(offset=addr, num=1, width=32)
        print "VETAR 1", addr, "<VALUE>", hex(read[0])
        read = map_2.read(offset=addr, num=1, width=32)
        print "VETAR 2", addr, "<VALUE>", hex(read[0])
        read = map_3.read(offset=addr, num=1, width=32)
        print "VETAR 3", addr, "<VALUE>", hex(read[0])


	
if __name__ == "__main__":
   main(sys.argv[1:])
