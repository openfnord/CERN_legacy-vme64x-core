#!/usr/bin/python
    
import pyvmelib
import sys, getopt
import os
import struct

def base_addr(slot):
	slot_m = int(slot) 
	slot_m = slot_m << 19
	return hex(slot_m)

def addr_conv(addr):
	addr_m = int(addr,16)
	addr_m = addr_m << 2

	return addr_m

def main(argv):

	try:
		opts, args = getopt.getopt(argv,"hs:r:l:",["help"])
	except getopt.GetoptError:
		print 'vme_read -l <vme slot> -s <size of the WB bus> -r <WB adress to read in hex without prefix>'
		sys.exit(2)

	if (len(sys.argv) <= 1 or len(sys.argv) != 7):
		print 'vme_read -l <vme slot> -s <size of the WB bus> -r <WB adress to read in hex without prefix>'
		sys.exit()

	for opt, arg in opts:
		if opt == '-h':
			print 'vme_read -l <vme slot> -s <size of the WB bus> -r <WB adress to read in hex without prefix>'
			sys.exit()
		elif opt in ("-s"):
			size_wb = arg
		elif opt in ("-r"):
			addr = arg
		elif opt in ("-l"):
			slot = arg
	
	print "Reading from VME card in slot", slot, "WB bus","0x"+addr, "in a memory space of", size_wb

	map = pyvmelib.Mapping(am=0x2f, base_address= int(base_addr(slot),16), data_width=16, size=512*1024)
	
	if map.vaddr == None :
		print "Not able to reach the card in slot",slot
		sys.exit()

	map.write(offset=0x7FF63, values=192, width=8)
	map.write(offset=0x7FF67, values=0, width=8)
	map.write(offset=0x7FF6B, values=0, width=8)
	map.write(offset=0x7FF6F, values=36, width=8)
	map.write(offset=0x7FFFB, values=16, width=8)

	map = pyvmelib.Mapping(am=0x09, base_address=0xc0000000, data_width=32, size = int(size_wb))
	
	if map.vaddr == None :
		print "Not able to reach the card in slot",slot
		sys.exit()


	addr_vme = addr_conv(addr)

	while  1:

		read = map.read(offset=addr_vme, num=1, width=32)
		print "<ADDRESS>", "0x"+addr, "<VALUE>", hex(read[0])

		addr = raw_input("New address (press n for exit):")
		if addr == 'n' or addr == '':
			sys.exit()

		addr_vme = addr_conv(addr)

	map.unmap()
	map.unmap()

if __name__ == "__main__":
   main(sys.argv[1:])
